/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
        conditional_layers {
            compatible = "zmk,conditional-layers";
            tri_layer {
                if-layers = <1 2>;
                then-layer = <3>;
            };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB  |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  ;  |  ALT  |
// |  GUI  |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  |   '   |
// | SHIFT |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  /  | SHIFT |
//                    | CTRL | LWR | SPC |   | ENT | RSE  | BSPC |
                        bindings = <
   &kp TAB   &kp Q &kp W     &kp F &kp P       &kp B   &kp J &kp L   &kp U     &kp Y   &kp SEMI &kp RALT
   &kp LGUI  &kp A &kp R     &kp S &kp T       &kp G   &kp M &kp N   &kp E     &kp I   &kp O    &kp SQT
   &kp LSHFT &kp Z &kp X     &kp C &kp D       &kp V   &kp K &kp H   &kp COMMA &kp DOT &kp FSLH &kp RSHFT
                   &kp LCTRL &mo 1 &kp SPACE   &kp RET &mo 2 &kp BSPC
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  ESC  |  1  |  2  |  3   |  4  |  5  |   |  6  |  7  |  8   |  9  |  0  |     |
// |       |     |     |      |     |     |   | LFT | DWN |  UP  | RGT |     |     |
// | SHIFT |     |     |      |     |     |   |     |     |      |     |     |     |
//                     | CTRL |     | SPC |   | ENT |     | DEL  |
                        bindings = <
   &kp ESC   &kp N1 &kp N2 &kp N3    &kp N4 &kp N5     &kp N6   &kp N7   &kp N8   &kp N9    &kp N0 &trans
   &trans    &trans &trans &trans    &trans &trans     &kp LEFT &kp DOWN &kp UP   &kp RIGHT &trans &trans
   &kp LSHFT &trans &trans &trans    &trans &trans     &trans   &trans   &trans   &trans    &trans &trans
                           &kp LCTRL &trans &kp SPACE  &kp RET  &trans   &kp DEL
                        >;
                };
                raise_layer {
// -----------------------------------------------------------------------------------------
// |  ESC  |  !  |  @  |  #   |  $  |  %  |   |  ^  |  &  |  *   |  (  |  )  |     |
// |  GUI  |     |     |      |     |     |   |  -  |  =  |  [   |  ]  |  \  |  `  |
// | SHIFT |     |     |      |     |     |   |  _  |  +  |  {   |  }  | "|" |  ~  |
//                     | CTRL |     | SPC |   | ENT |     | BSPC |
                        bindings = <
   &kp ESC   &kp EXCL &kp AT &kp HASH  &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &trans
   &kp LGUI  &trans   &trans &trans    &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
   &kp LSHFT &trans   &trans &trans    &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
                             &kp LCTRL &trans   &kp SPACE   &kp RET   &trans    &kp BSPC
                        >;
                };
                adjust_layer {
// -----------------------------------------------------------------------------------------
// |  F1  |  F2   |  F3   |  F4  | F5  | F6  |   |  F7   | F8  | F9  | F10 | F11 | F12 |
// |      | PREV  | PLAY  | NEXT |     |     |   |       |     |     |     |     |     |
// |      | VOLDN | VOLUP | MUTE |     |     |   | BTCLR | BT1 | BT2 | BT3 | BT4 | BT5 |
//                        |      |     |     |   |       |     |     |
                        bindings = <
   &kp F1 &kp F2       &kp F3           &kp F4     &kp F5 &kp F6   &kp F7     &kp F8       &kp F9       &kp F10      &kp F11      &kp F12
   &trans &kp C_PREV   &kp C_PLAY_PAUSE &kp C_NEXT &trans &trans   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
   &trans &kp C_VOL_DN &kp C_VOL_UP     &kp C_MUTE &trans &trans   &trans     &trans       &trans       &trans       &trans       &trans
                                        &trans     &trans &trans   &trans     &trans       &trans
                        >;
                };
        };
};
